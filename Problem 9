class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def max_level_sum_dfs(root):
    level_sums = []

    def dfs(node, level):
        if not node:
            return

        if len(level_sums) <= level:
            level_sums.append(0)

        level_sums[level] += node.value
        dfs(node.left, level + 1)
        dfs(node.right, level + 1)

    dfs(root, 0)
    max_sum = max(level_sums)
    result_level = level_sums.index(max_sum)

    return result_level, max_sum

def build_tree():
    value = int(input("Enter the value for the root node: "))
    root = TreeNode(value)
    
    queue = [root]
    
    while queue:
        current = queue.pop(0)
        left_value = input(f"Enter the left child value for {current.value} (or 'None' if no left child): ")
        if left_value.lower() != 'none':
            current.left = TreeNode(int(left_value))
            queue.append(current.left)
        
        right_value = input(f"Enter the right child value for {current.value} (or 'None' if no right child): ")
        if right_value.lower() != 'none':
            current.right = TreeNode(int(right_value))
            queue.append(current.right)
    
    return root

root = build_tree()
result_level, max_sum = max_level_sum_dfs(root)
print(f"Maximum level sum is {max_sum} at level {result_level}")
