class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def count_subtrees_with_sum(root, target_sum):
    if not root:
        return 0

    count = count_subtrees_with_sum(root.left, target_sum) + count_subtrees_with_sum(root.right, target_sum)

    if is_subtree_with_sum(root, target_sum):
        count += 1

    return count

def is_subtree_with_sum(node, target_sum):
    if not node:
        return False

    current_sum = node.value + sum_tree(node.left) + sum_tree(node.right)
    return current_sum == target_sum

def sum_tree(node):
    if not node:
        return 0
    return node.value + sum_tree(node.left) + sum_tree(node.right)

def build_tree():
    value = int(input("Enter the value for the root node: "))
    root = TreeNode(value)
    
    queue = [root]
    
    while queue:
        current = queue.pop(0)
        left_value = input(f"Enter the left child value for {current.value} (or 'None' if no left child): ")
        if left_value.lower() != 'none':
            current.left = TreeNode(int(left_value))
            queue.append(current.left)
        
        right_value = input(f"Enter the right child value for {current.value} (or 'None' if no right child): ")
        if right_value.lower() != 'none':
            current.right = TreeNode(int(right_value))
            queue.append(current.right)
    
    return root

root = build_tree()
target_sum = int(input("Enter the target sum: "))
result = count_subtrees_with_sum(root, target_sum)
print(f"Number of subtrees with sum {target_sum}: {result}")
